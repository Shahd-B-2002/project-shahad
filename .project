# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
data = pd.read_csv('heart.csv')

# Check for missing values
print("Missing values in each column:")
print(data.isnull().sum())

# If there are missing values, you can handle them:
# Example: Filling missing values with the median of the column (if any)
# data.fillna(data.median(), inplace=True)

# 1. Data Overview (first few rows)
print("Data Overview:")
print(data.head())

# 2. Data Summary Statistics
print("Data Summary Statistics:")
print(data.describe())

# 3. Distribution of Heart Disease Cases (target)
plt.figure(figsize=(6, 4))
sns.countplot(x='target', data=data, palette='Set2')
plt.title('Distribution of Heart Disease (0 = No, 1 = Yes)')
plt.xlabel('Heart Disease')
plt.ylabel('Count')
plt.show()

# 4. Age Distribution of Heart Disease Patients and Non-Patients
plt.figure(figsize=(8, 6))
sns.histplot(data=data, x='age', hue='target', multiple="stack", kde=True, palette='coolwarm')
plt.title('Age Distribution of Heart Disease vs No Disease')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# 5. Blood Pressure Distribution
plt.figure(figsize=(8, 6))
sns.histplot(data=data, x='trestbps', hue='target', multiple="stack", kde=True, palette='coolwarm')
plt.title('Blood Pressure Distribution')
plt.xlabel('Resting Blood Pressure (trestbps)')
plt.ylabel('Count')
plt.show()

# 6. Cholesterol Distribution
plt.figure(figsize=(8, 6))
sns.histplot(data=data, x='chol', hue='target', multiple="stack", kde=True, palette='coolwarm')
plt.title('Cholesterol Distribution')
plt.xlabel('Cholesterol (chol)')
plt.ylabel('Count')
plt.show()

# 7. Age vs Cholesterol
plt.figure(figsize=(8, 6))
sns.scatterplot(x='age', y='chol', hue='target', data=data, palette='coolwarm')
plt.title('Age vs Cholesterol')
plt.xlabel('Age')
plt.ylabel('Cholesterol')
plt.show()

# 8. Age vs Blood Pressure
plt.figure(figsize=(8, 6))
sns.scatterplot(x='age', y='trestbps', hue='target', data=data, palette='coolwarm')
plt.title('Age vs Blood Pressure')
plt.xlabel('Age')
plt.ylabel('Resting Blood Pressure')
plt.show()

# 9. Correlation Heatmap (Updated)
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Preprocessing the Data

# 10. Splitting data into features and target
X = data.drop('target', axis=1)
y = data['target']

# 11. Splitting into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# 12. Feature Scaling (Standardizing the features)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model Building: Logistic Regression
# 13. Building a Logistic Regression Model
model = LogisticRegression(max_iter=1000)
model.fit(X_train_scaled, y_train)

# 14. Predictions
y_pred = model.predict(X_test_scaled)

# 15. Evaluating the Model
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("Classification Report:")
print(classification_report(y_test, y_pred))

# 16. Model Coefficients
coef_df = pd.DataFrame(model.coef_[0], X.columns, columns=['Coefficient'])
print(coef_df)

# 17. Cross-validation (optional)
cv_scores = cross_val_score(model, X_train_scaled, y_train, cv=5)
print("Cross-validation Scores (Logistic Regression):", cv_scores)
print("Average Cross-validation Score:", np.mean(cv_scores))

